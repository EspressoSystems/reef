var searchIndex = JSON.parse('{\
"reef":{"doc":"An abstraction of a CAP-style network.","t":[2,0,0,0,6,13,13,3,13,6,13,13,6,4,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,16,16,16,16,8,8,16,16,16,8,16,8,8,8,16,10,10,10,10,10,11,10,11,10,11,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,6,13,6,6,6,6,6,6,13,6,6,4,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["Ledger","cap","traits","types","Block","Failed","Freeze","LedgerWithHeight","Mint","NullifierSet","Receive","Send","Transaction","TransactionKind","Unfreeze","Unknown","ValidationError","Validator","add_transaction","arbitrary","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","commit","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","get_hash","hash","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_bad_nullifier_proof","merkle_height","mint","multi_insert","name","ne","new","new","now","now","open_mint_viewing_memo","open_xfr_viewing_memo","receive","record_root_history","records_commitment","records_frontier","send","serialize","serialize","serialize","source","srs","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","txns","type_id","type_id","type_id","type_id","unfreeze","unknown","validate_and_apply","vzip","vzip","vzip","vzip","msg","Block","Block","Error","Hash","Kind","Ledger","NullifierSet","NullifierSet","Proof","StateCommitment","Transaction","Transaction","TransactionKind","ValidationError","Validator","Validator","add_transaction","cap","commit","freeze","hash","input_nullifiers","is_bad_nullifier_proof","is_empty","kind","len","merkle_height","mint","multi_insert","name","new","new","now","open_viewing_memo","output_commitments","output_len","output_openings","proven_nullifiers","receive","record_root_history","send","set_proofs","srs","txns","unfreeze","unknown","validate_and_apply","Block","NoViewingMemos","NullifierProof","NullifierSet","StateCommitment","Transaction","TransactionHash","TransactionKind","UnviewableAsset","ValidationError","Validator","ViewingError","ViewingMemoOpening","as_any","as_any","as_any_mut","as_any_mut","asset","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","init","init","inputs","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","ne","outputs","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["reef","","","","reef::cap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","reef::cap::ValidationError","reef::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","reef::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Minimal implementation of the ledger traits for a …","Traits describing the interface of a CAP ledger.","Ledger types","A block of CAP transactions.","","","A minimal CAP ledger.","","A set of nullifiers.","","","A CAP transaction.","All the kinds of transactions in the basic CAP protocol.","","","Errors in mock CAP validation.","A mock CAP validator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Attempt to open the viewer memo attached to a CAP mint …","Attempt to open the viewer memo attached to a CAP transfer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A block of transactions.","Blocks applied by this validator.","Errors that can occur when validation this block.","Transaction digest.","Supported transaction types.","A CAP ledger.","A set of nullifiers which have been spent.","Nullifier set to be updated when a transaction is added to …","Authentication that a given nullifier is or isn’t in the …","A commitment to the state of the validator.","A CAP transaction.","Transactions in this block.","The types of transactions supported by this network.","Errors that can occur when validating a Transaction or …","State required to validate a Block of Transactions.","The state of a validator for this ledger.","Add a new Transaction to this block.","Wrap a raw CAP transaction in this network’s transaction …","The commitment to the current state of the validator.","","A committing hash of this transaction.","This transaction’s inputs, without authentication.","Whether validation failed because a transaction’s …","Whether there are no transactions in this block.","The type of this transaction.","The number of transactions in this block.","The height of the ledger’s records MerkleTree.","","Update the set to include additional nullifiers.","A human-readable name for this ledger.","A catch-all error variant with a helpful message.","Create a block from a list of transactions.","The number of blocks this validator has applied.","Attempt to decrypt the attached viewing memo.","Commitments to the records that this transaction will …","The number of outputs.","If this is not a private transaction, get the openings of …","Nullifiers for the records that this transaction will …","","The number of past MerkleTree roots maintained by …","","Update the proofs that this transaction’s nullifiers are …","The universal setup for PLONK proofs.","The transactions in this block.","","","Apply a new block, updating the state and returning UIDs …","A block of transactions that can be applied to a ledger <code>L</code>.","","A proof that a nullifier is spent or unspent, relative to …","A set of spent nullifiers for a ledger <code>L</code>.","A commitment to a validator state for a ledger <code>L</code>.","A transaction that can be applied to a ledger <code>L</code>.","A committing hash of a transaction that can be applied to …","Types of transactions supported by a ledger <code>L</code>.","","An error that can occur while validating transitions of a …","A validator for a ledger <code>L</code>.","Errors that can occur when trying to decrypt a viewing …","Information contained in a viewing memo.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,0,2,0,2,2,0,0,2,2,0,0,3,4,2,1,4,5,2,1,4,5,1,1,2,1,4,5,2,1,4,5,1,2,1,4,5,2,1,4,5,4,4,2,1,4,5,2,1,4,5,1,2,1,4,2,1,4,5,2,4,2,2,1,1,4,5,2,2,1,4,5,2,2,2,1,4,5,2,1,4,5,2,1,4,5,2,1,4,5,2,1,4,5,1,5,2,6,5,4,3,1,4,4,0,0,2,5,4,4,2,2,1,4,1,5,2,1,4,5,2,1,2,1,4,5,2,1,4,5,3,2,1,4,5,2,2,4,2,1,4,5,7,0,8,9,10,10,0,0,10,11,8,0,9,0,0,0,12,9,10,8,13,10,10,14,9,10,9,12,13,11,12,14,9,8,10,10,10,10,10,13,12,13,10,12,9,13,13,8,0,15,0,0,0,0,0,0,15,0,0,0,0,16,15,16,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["block",6],["transaction",6]],["result",4]],[[["unstructured",3]],["result",6,[["validator",3]]]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["error",8]],[[["validationerror",4]],["option",4,[["backtrace",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["validationerror",4]],["option",4,[["error",8]]]],[[["transactionkind",4]],["transactionkind",4]],[[["validationerror",4]],["validationerror",4]],[[["validator",3]],["validator",3]],[[["ledgerwithheight",3]],["ledgerwithheight",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["validator",3]]],[[],["validator",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["validationerror",4]],["str",0]],[[],["result",4,[["transactionkind",4]]]],[[],["result",4,[["validationerror",4]]]],[[],["result",4,[["validator",3]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["transactionkind",4],["transactionkind",4]],["bool",0]],[[["validator",3],["validator",3]],["bool",0]],[[["transactionkind",4],["formatter",3]],["result",6]],[[["transactionkind",4],["formatter",3]],["result",4,[["error",3]]]],[[["validationerror",4],["formatter",3]],["result",6]],[[["validationerror",4],["formatter",3]],["result",6]],[[["validator",3],["formatter",3]],["result",6]],[[["ledgerwithheight",3],["formatter",3]],["result",6]],[[],["transactionkind",4]],[[]],[[]],[[]],[[]],[[["",0],["",0]],["u64",0]],[[["transactionkind",4],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["validationerror",4]],["bool",0]],[[],["u8",0]],[[],["transactionkind",4]],[[["nullifierset",6]],["result",4]],[[],["string",3]],[[["validator",3],["validator",3]],["bool",0]],[[["vec",3,[["transaction",6]]]],["block",6]],[[["display",8]],["validationerror",4]],[[["validator",3]],["u64",0]],null,[[["hashmap",3],["mintnote",3]],["result",4,[["viewingmemoopening",3],["viewingerror",4]]]],[[["hashmap",3],["hashmap",3],["transfernote",3]],["result",4,[["viewingmemoopening",3],["viewingerror",4]]]],[[],["transactionkind",4]],[[],["usize",0]],null,null,[[],["transactionkind",4]],[[["transactionkind",4]],["result",4]],[[["validationerror",4]],["result",4]],[[["validator",3]],["result",4]],[[["validationerror",4]],["option",4,[["error",8]]]],[[],["universalparam",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["block",6]],["vec",3,[["transaction",6]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["transactionkind",4]],[[],["transactionkind",4]],[[["validator",3]],["result",4,[["validationerror",4]]]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["transactionnote",4],["vec",3]]],[[["",0]]],[[]],[[["",0]]],[[["",0]],["vec",3,[["nullifier",3]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]],["usize",0]],[[],["u8",0]],[[]],[[["",0]],["result",4]],[[],["string",3]],[[["display",8]]],[[["vec",3]]],[[["",0]],["u64",0]],[[["",0],["hashmap",3],["hashmap",3]],["result",4,[["viewingmemoopening",3],["viewingerror",4]]]],[[["",0]],["vec",3,[["recordcommitment",3]]]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["vec",3,[["recordopening",3]]]]]],[[["",0]],["vec",3]],[[]],[[],["usize",0]],[[]],[[["",0],["vec",3]]],[[],["universalparam",6]],[[["",0]],["vec",3]],[[]],[[]],[[["",0]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["viewingmemoopening",3]],["viewingmemoopening",3]],[[["viewingerror",4]],["viewingerror",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["viewingmemoopening",3],["viewingmemoopening",3]],["bool",0]],[[["viewingerror",4],["viewingerror",4]],["bool",0]],[[["viewingmemoopening",3],["formatter",3]],["result",6]],[[["viewingerror",4],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],null,[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["viewingmemoopening",3],["viewingmemoopening",3]],["bool",0]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]]],"p":[[4,"ValidationError"],[4,"TransactionKind"],[6,"Block"],[3,"Validator"],[3,"LedgerWithHeight"],[6,"NullifierSet"],[13,"Failed"],[8,"Validator"],[8,"Block"],[8,"Transaction"],[8,"NullifierSet"],[8,"Ledger"],[8,"TransactionKind"],[8,"ValidationError"],[4,"ViewingError"],[3,"ViewingMemoOpening"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
